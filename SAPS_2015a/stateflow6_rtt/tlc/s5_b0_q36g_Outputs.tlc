%implements s5_b0_q36g_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
uint8_T rtb_UltrasonicSensor_0;
int8_T tmp;
int32_T rtb_Positon_0;
int8_T tmp_0;
real_T tmp_1;
%closefile localVarDecl
%assign tlcOutputsFcnOfS5B1 = OpaqueTLCBlockFcn("Outputs", 5, 1, 2, 0)
%assign tlcOutputsFcnOfS5B2 = OpaqueTLCBlockFcn("Outputs", 5, 2, 2, 0)
%assign tlcOutputsFcnOfS5B3 = OpaqueTLCBlockFcn("Outputs", 5, 3, 2, 0)
%<SLibGenerateExtModeOutput(system)>
/* Reset subsysRan breadcrumbs */
srClearBC(stateflow6_DW.ObjectDetection_SubsysRanBC);
/* Reset subsysRan breadcrumbs */
srClearBC(stateflow6_DW.ParkingSpaceDetection_SubsysRan);
/* Constant: '<Root>/Constant2' */
stateflow6_B.Constant2 = stateflow6_P.Constant2_Value;
/* S-Function (ev3_ultrasonic_sensor): '<Root>/Ultrasonic Sensor' */
rtb_UltrasonicSensor_0 = getUltrasonicSensorValue(1U);
/* DataTypeConversion: '<Root>/Data Type Conversion1' incorporates:
 *  S-Function (ev3_ultrasonic_sensor): '<Root>/Ultrasonic Sensor'
 */
stateflow6_B.DataTypeConversion1 = rtb_UltrasonicSensor_0;
/* S-Function (ev3_encoder): '<Root>/Encoder' incorporates:
 *  Delay: '<Root>/Delay1'
 */
tmp = stateflow6_DW.Delay1_DSTATE;
rtb_Positon_0 = getEncoderValueExternalReset(1U, &tmp);
/* Gain: '<Root>/Gain1' incorporates:
 *  DataTypeConversion: '<Root>/Data Type Conversion2'
 *  S-Function (ev3_encoder): '<Root>/Encoder'
 */
stateflow6_B.Encoder = stateflow6_P.Gain1_Gain * (real_T)rtb_Positon_0;
/* Delay: '<Root>/Delay2' */
stateflow6_B.Delay2 = stateflow6_DW.Delay2_DSTATE;
/* Constant: '<Root>/Constant1' */
stateflow6_B.Constant1 = stateflow6_P.ObjLength;
/* Constant: '<Root>/Constant' */
stateflow6_B.Constant = stateflow6_P.ParkLength;
/* Chart: '<Root>/Chart' */
if (stateflow6_DW.temporalCounter_i1 < 31U) {
    stateflow6_DW.temporalCounter_i1++;
}
/* Gateway: Chart */
stateflow6_DW.sfEvent = stateflow6_CALL_EVENT_g;
/* During: Chart */
if (stateflow6_DW.is_active_c3_stateflow6 == 0U) {
    /* Entry: Chart */
    stateflow6_DW.is_active_c3_stateflow6 = 1U;
    /* Entry Internal: Chart */
    /* Transition: '<S1>:74' */
    stateflow6_B.ChartMode = ChartModeType_First_Object;
    stateflow6_DW.temporalCounter_i1 = 0U;
    /* Entry 'First_Object': '<S1>:57' */
    stateflow6_B.state_nr = 1.0;
} else {
    switch (stateflow6_B.ChartMode) {
      case ChartModeType_First_Object:
        /* During 'First_Object': '<S1>:57' */
        if ((stateflow6_DW.temporalCounter_i1 >= 20U) && ((stateflow6_B.DataTypeConversion1 - stateflow6_B.Delay2 > 2.0) || ((stateflow6_B.DataTypeConversion1 - stateflow6_B.Delay2 < -2.0) && (stateflow6_B.Encoder < stateflow6_B.Constant1)))) {
            /* Transition: '<S1>:159' */
            /* Transition: '<S1>:161' */
            stateflow6_B.ChartMode = ChartModeType_First_Object;
            stateflow6_DW.temporalCounter_i1 = 0U;
            /* Entry 'First_Object': '<S1>:57' */
            stateflow6_B.state_nr = 1.0;
        } else if ((stateflow6_B.DataTypeConversion1 > 24.0) && (stateflow6_B.Encoder >= stateflow6_B.Constant1)) {
            /* Transition: '<S1>:83' */
            stateflow6_B.ChartMode = ChartModeType_Park_Space;
            stateflow6_DW.temporalCounter_i1 = 0U;
            /* Entry 'Park_Space': '<S1>:59' */
            stateflow6_B.state_nr = 2.0;
        } else {
            ObjDetn(stateflow6_B.Constant2, stateflow6_B.DataTypeConversion1, stateflow6_B.Encoder, stateflow6_B.Delay2, &stateflow6_B.Motor);
        }
        break;
      case ChartModeType_Park_Space:
        /* During 'Park_Space': '<S1>:59' */
        if ((stateflow6_B.DataTypeConversion1 < 44.0) && (stateflow6_B.DataTypeConversion1 > 24.0) && (stateflow6_B.Encoder < stateflow6_B.Constant)) {
            /* Transition: '<S1>:95' */
            stateflow6_B.ChartMode = ChartModeType_First_Object;
            stateflow6_DW.temporalCounter_i1 = 0U;
            /* Entry 'First_Object': '<S1>:57' */
            stateflow6_B.state_nr = 1.0;
        } else if ((stateflow6_DW.temporalCounter_i1 >= 20U) && ((stateflow6_B.DataTypeConversion1 - stateflow6_B.Delay2 > 2.0) || ((stateflow6_B.DataTypeConversion1 - stateflow6_B.Delay2 < -2.0) && (stateflow6_B.Encoder < stateflow6_B.Constant)))) {
            /* Transition: '<S1>:162' */
            /* Transition: '<S1>:161' */
            stateflow6_B.ChartMode = ChartModeType_First_Object;
            stateflow6_DW.temporalCounter_i1 = 0U;
            /* Entry 'First_Object': '<S1>:57' */
            stateflow6_B.state_nr = 1.0;
        } else if ((stateflow6_B.DataTypeConversion1 < 24.0) && (stateflow6_B.Encoder >= stateflow6_B.Constant)) {
            /* Transition: '<S1>:122' */
            stateflow6_B.ChartMode = ChartModeType_Second_Object;
            stateflow6_DW.temporalCounter_i1 = 0U;
            /* Entry 'Second_Object': '<S1>:118' */
            stateflow6_B.state_nr = 3.0;
        } else {
            ParkDetn(stateflow6_B.Constant2, stateflow6_B.DataTypeConversion1, stateflow6_B.Encoder, stateflow6_B.Delay2, &stateflow6_B.Motor);
        }
        break;
      case ChartModeType_Second_Object:
        /* During 'Second_Object': '<S1>:118' */
        if ((stateflow6_DW.temporalCounter_i1 >= 20U) && ((stateflow6_B.DataTypeConversion1 - stateflow6_B.Delay2 > 2.0) || ((stateflow6_B.DataTypeConversion1 - stateflow6_B.Delay2 < -2.0) && (stateflow6_B.Encoder < stateflow6_B.Constant1)))) {
            /* Transition: '<S1>:165' */
            /* Transition: '<S1>:161' */
            stateflow6_B.ChartMode = ChartModeType_First_Object;
            stateflow6_DW.temporalCounter_i1 = 0U;
            /* Entry 'First_Object': '<S1>:57' */
            stateflow6_B.state_nr = 1.0;
        } else if ((stateflow6_B.DataTypeConversion1 > 24.0) && (stateflow6_B.Encoder > stateflow6_B.Constant1)) {
            /* Transition: '<S1>:133' */
            stateflow6_B.ChartMode = ChartModeType_Stop_motor;
            /* Entry 'Stop_motor': '<S1>:132' */
            stateflow6_B.Motor = 0.0;
            stateflow6_B.state_nr = 5.0;
        } else {
            ObjDetn(stateflow6_B.Constant2, stateflow6_B.DataTypeConversion1, stateflow6_B.Encoder, stateflow6_B.Delay2, &stateflow6_B.Motor);
        }
        break;
      default:
        /* During 'Stop_motor': '<S1>:132' */
        break;
    }
}
/* End of Chart: '<Root>/Chart' */

/* DataTypeConversion: '<S2>/Data Type Conversion' */
tmp_1 = floor(stateflow6_B.Motor);
if (tmp_1 < 128.0) {
    if (tmp_1 >= -128.0) {
        /* S-Function (ev3_motor): '<S2>/Motor' */
        tmp_0 = (int8_T)tmp_1;
    } else {
        /* S-Function (ev3_motor): '<S2>/Motor' */
        tmp_0 = MIN_int8_T;
    }
} else {
    /* S-Function (ev3_motor): '<S2>/Motor' */
    tmp_0 = MAX_int8_T;
}
/* End of DataTypeConversion: '<S2>/Data Type Conversion' */

/* S-Function (ev3_motor): '<S2>/Motor' */
setMotor(&tmp_0, 1U, 2U);
%<tlcOutputsFcnOfS5B1>\
%<tlcOutputsFcnOfS5B2>\
/* Sum: '<Root>/Add1' */
stateflow6_B.UltrDiff = stateflow6_B.DataTypeConversion1 - stateflow6_B.Delay2;
%<tlcOutputsFcnOfS5B3>\
/* DataTypeConversion: '<Root>/Data Type Conversion3' incorporates:
 *  Delay: '<Root>/Delay'
 *  Sum: '<Root>/Add'
 */
tmp_1 = floor(stateflow6_B.state_nr - stateflow6_DW.Delay_DSTATE);
if (rtIsNaN(tmp_1) || rtIsInf(tmp_1)) {
    tmp_1 = 0.0;
} else {
    tmp_1 = fmod(tmp_1, 256.0);
}
stateflow6_B.DataTypeConversion3 = (int8_T)(tmp_1 < 0.0 ? (int32_T)(int8_T)-(int8_T)(uint8_T)-tmp_1 : (int32_T)(int8_T)(uint8_T)tmp_1);
/* End of DataTypeConversion: '<Root>/Data Type Conversion3' */
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(2, 0, fcnProtoType)>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
